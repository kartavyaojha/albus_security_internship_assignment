import re
import requests
import socket
import argparse
from colorama import init, Fore, Style

# Initialize colorama
init(autoreset=True)

class RemoteCodeExecutionScanner:
    def _init(self, target_url):  # Corrected the method name to __init_
        self.target_url = target_url
        self.rce_signatures = [
            r'\bexec\b',
            r'\bsystem\b',
            r'\beval\b',
            r'\b_import\b',  # Corrected __import_ pattern
            r'\bexec\s*\(\s*\)',
            r'\beval\s*\(\s*\)',
            r'\bsystem\s*\(\s*\)',
            r'\bshell_exec\s*\(\s*\)',
            r'\bpassthru\s*\(\s*\)',
            r'\bproc_open\s*\(\s*\)',
            r'\bpopen\s*\(\s*\)',
            r'\bsymlink\s*\(\s*\)'
        ]
        self.exclusions = [
            r'//.*',
            r'\".*?\"',
            r'\'.*?\'',
        ]

    def scan_for_rce(self):
        try:
            response = requests.get(self.target_url, timeout=5)
            response.raise_for_status()
            page_content = response.text
            for signature in self.rce_signatures:
                if self._match_pattern(page_content, signature):
                    return True
            return False
        except requests.RequestException as e:
            print(f"Request Error: {e}")
            return False

    def scan_via_socket(self):
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            host = self.extract_host(self.target_url)
            port = 80
            sock.connect((host, port))
            request = f'GET / HTTP/1.1\r\nHost: {self.target_url}\r\n\r\n'
            sock.send(request.encode())
            response = sock.recv(1024)
            for signature in self.rce_signatures:
                if self._match_pattern(response.decode(), signature):
                    return True
            return False
        except socket.error as e:
            print(f"Socket Error: {e}")
            return False

    def scan_file_for_rce(self):
        try:
            response = requests.get(self.target_url + '/robots.txt', timeout=5)
            response.raise_for_status()
            file_content = response.text
            for signature in self.rce_signatures:
                if self._match_pattern(file_content, signature):
                    return True
            return False
        except requests.RequestException as e:
            print(f"Request Exception: {e}")
            return False

    def extract_host(self, url):
        return url.split('//')[-1].split('/')[0]

    def check_cve_vulnerability(self, url):
        headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.1.1 Safari/605.1.15',
            'Accept': '/'
        }
        response = requests.get(url, headers=headers)
        if 'WordPress 6.4 was detected' in response.text:
            print(f"Potential Vulnerability CVE-2024-31210 found at {url}")
        else:
            print(f"No known vulnerabilities found at {url}")

    def _match_pattern(self, content, pattern):
        for exclusion in self.exclusions:
            content = re.sub(exclusion, '', content)
        if re.search(pattern, content, re.IGNORECASE):
            return True
        return False

def main():
    print(Fore.CYAN + Style.BRIGHT + "RCE Detector")
    parser = argparse.ArgumentParser(description="Remote Code Execution (RCE) Scanner")
    parser.add_argument("-u", "--url", required=True, help="URL to scan for RCE vulnerabilities")
    args = parser.parse_args()

    if args.url:
        scanner = RemoteCodeExecutionScanner(args.url)
        if scanner.scan_for_rce() or scanner.scan_via_socket() or scanner.scan_file_for_rce() or scanner.check_cve_vulnerability(args.url):
            print(Fore.RED + "Potential RCE detected!")
        else:
            print(Fore.GREEN + "No RCE detected.")

if _name_ == "_main_":  # Corrected the condition
    main()
